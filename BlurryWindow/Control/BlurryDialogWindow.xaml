<Window x:Class="BlurryControls.Control.BlurryDialogWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:p="clr-namespace:BlurryControls.Properties"
        xmlns:control="clr-namespace:BlurryControls.Control"
        mc:Ignorable="d"
        AllowsTransparency="True"
        WindowStyle="None"
        ShowInTaskbar="False"
        Topmost="True"
        Loaded="Window_Loaded"
        SizeToContent="WidthAndHeight"
        WindowStartupLocation="CenterOwner"
        d:DataContext="{d:DesignData BlurryWindow}"
        x:ClassModifier="internal">
    <!-- 
    the following definition represents an implementation which is similar to the native windows
    MessageBox control. it contains a visual definition for a caption, an icon which is arranged 
    in the content area, a prompt to the user and a dynamic set of buttons which provide options
    for a user to answer the prompt
    -->

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/BlurryControls;component/Themes/Generic/Brushes.xaml" />
                <ResourceDictionary Source="pack://application:,,,/BlurryControls;component/Themes/Generic/Icons.xaml" />
                <ResourceDictionary Source="pack://application:,,,/BlurryControls;component/Themes/Generic/Text.xaml" />
                <ResourceDictionary Source="pack://application:,,,/BlurryControls;component/Themes/Generic/ToolTip.xaml" />
                <ResourceDictionary Source="pack://application:,,,/BlurryControls;component/Themes/Generic/Button.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <!-- 
    the border is important because the window gets "lost" on single 
    colored backgrounds due to its transparent appearance
    -->
    <Border BorderThickness="1"
            BorderBrush="{StaticResource GeneralBorderBrush}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!-- MenuBar with animated background, close button, an image (not set) and a caption -->
            <Grid x:Name="MenuBar"
                  Grid.Row="0"
                  Height="37"
                  Background="{StaticResource GeneralBackgroundBrush}"
                  HorizontalAlignment="Stretch"
                  MouseLeftButtonDown="MenuBar_OnMouseLeftButtonDown">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="37" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="53" />
                </Grid.ColumnDefinitions>

                <StackPanel x:Name="LeftPanel"
                            Grid.Column="0"
                            Margin="5,5,0,0"
                            VerticalAlignment="Stretch"
                            Orientation="Horizontal">

                    <Image x:Name="TitleImage"
                           Margin="2 2 6 6"
                           Height="24"
                           Width="24" />
                </StackPanel>

                <TextBlock x:Name="TitleTextBlock"
                           Style="{StaticResource TextBlockBaseStyle}"
                           Grid.Column="1"
                           Margin="0 5"
                           Background="Transparent"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           FontSize="20"/>

                <StackPanel x:Name="RightPanel"
                            Grid.Column="2"
                            Margin="0 5 5 0"
                            VerticalAlignment="Stretch"
                            Orientation="Horizontal">

                    <Button x:Name="CloseButton"
                            Style="{StaticResource WindowButtonExitStyle}"
                            ToolTip="{x:Static p:Resources.Close}"
                            Click="CloseButton_OnClick">
                        <ContentControl Template="{StaticResource Close032W}"/>
                    </Button>
                </StackPanel>
            </Grid>

            <Grid x:Name="ContentGrid"
                  Grid.Row="1">
                <Grid Margin="16">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <!-- an icon which is chosen from a preset to optically specify the prompt -->
                    <Image x:Name="ContentImage"
                           VerticalAlignment="Center"
                           Height="64"
                           Width="64"
                           Margin="16 -32 32 0" />

                    <!-- 
                    here goes the user prompt 
                    if the text exceeds the boundaries of the TextBlock control
                    a vertical ScrollBar is provided
                    -->
                    <ScrollViewer Grid.Column="1"
                                  MaxHeight="218"
                                  MaxWidth="304"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Left"
                                  VerticalScrollBarVisibility="Auto">
                        <TextBlock x:Name="DialogMessageTextBlock"
                                   Style="{StaticResource TextBlockBaseStyle}"
                                   TextWrapping="WrapWithOverflow" />
                    </ScrollViewer>
                </Grid>
                
                <!--when CustomContent is set, it is displayed here-->
                <ContentControl x:Name="CustomContentControl"/>
            </Grid>

            <!-- 
            area with animated background and a set of the following buttons
                _Yes
                _No
                _Ok
                _Cancel
            or a set of custom buttons
            
            the composition of buttons is limited by the enum BlurryDialogButton
            -->
            <Grid x:Name="ButtonGrid"
                  Grid.Row="2"
                  Height="42"
                  Background="Transparent"
                  HorizontalAlignment="Stretch"
                  MouseLeftButtonDown="MenuBar_OnMouseLeftButtonDown">
                <StackPanel x:Name="ButtonPanel"
                            Margin="0 5"
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Center"
                            Orientation="Horizontal">
                    <!-- Yes -->
                    <Button x:Name="YesButton"
                            Style="{StaticResource WindowButtonDialogStyle}"
                            Click="YesButton_OnClick">
                        <TextBlock Style="{StaticResource TextBlockBaseStyle}"
                                   Text="{x:Static p:Resources.Yes}" />
                    </Button>

                    <!-- No -->
                    <Button x:Name="NoButton"
                            Style="{StaticResource WindowButtonDialogStyle}"
                            Click="NoButton_OnClick">
                        <TextBlock Style="{StaticResource TextBlockBaseStyle}"
                                   Text="{x:Static p:Resources.No}" />
                    </Button>

                    <!-- Ok -->
                    <Button x:Name="OkButton"
                            Style="{StaticResource WindowButtonDialogStyle}"
                            Click="OkButton_OnClick">
                        <TextBlock Style="{StaticResource TextBlockBaseStyle}"
                                   Text="{x:Static p:Resources.Ok}" />
                    </Button>

                    <!-- Cancel -->
                    <Button x:Name="CancelButton"
                            Style="{StaticResource WindowButtonDialogStyle}"
                            Click="CancelButton_OnClick">
                        <TextBlock Style="{StaticResource TextBlockBaseStyle}"
                                   Text="{x:Static p:Resources.Cancel}" />
                    </Button>
                </StackPanel>
                
                <!-- custom button area -->
                <ItemsControl x:Name="CustomButtonPanel"
                              Margin="0 5"
                              VerticalAlignment="Stretch"
                              HorizontalAlignment="Center"
                              ItemsSource="{Binding CustomDialogButtons, 
                                                    RelativeSource={RelativeSource FindAncestor, 
                                                                                   AncestorType=control:BlurryDialogWindow}}"
                              ItemContainerStyle="{StaticResource WindowButtonBaseStyle}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </Grid>
        </Grid>
    </Border>
</Window>